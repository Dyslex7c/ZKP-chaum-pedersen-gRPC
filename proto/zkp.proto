syntax = "proto3";

package zkp;

service ChaumPedersenService {
    rpc InitializeProtocol(InitializeRequest) returns (InitializeResponse);
    rpc SendCommitment(CommitmentRequest) returns (ChallengeResponse);
    rpc VerifyProof(VerifyProofRequest) returns (VerifyProofResponse);
}

message InitializeRequest {
    uint32 bit_size = 1;
}

message InitializeResponse {
    string session_id = 1;
    PublicParameters params = 2;
}

message PublicParameters {
    bytes p = 1;  // Safe prime p = 2q + 1
    bytes q = 2;  // Sophie Germain prime q
    bytes g = 3;  // Generator
}

message CommitmentRequest {
    string session_id = 1;
    Commitment commitment = 2;
    ProofChallenge challenge_values = 3;
}

message Commitment {
    bytes a1 = 1;  // g^a mod p
    bytes b1 = 2;  // g^b mod p
    bytes c1 = 3;  // g^(ab) mod p
}

message ProofChallenge {
    bytes y1 = 1;  // g^x mod p
    bytes y2 = 2;  // b1^x mod p
}

message ChallengeResponse {
    bytes challenge = 1;  // Challenge value s
}

message VerifyProofRequest {
    string session_id = 1;
    bytes z = 2;  // x + a*s mod q
}

message VerifyProofResponse {
    bool verified = 1;
    string message = 2;
}